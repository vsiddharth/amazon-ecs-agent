// +build !windows

// Copyright 2014-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//	http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

package api

import (
	"testing"

	"github.com/aws/amazon-ecs-agent/agent/resources/cgroup"
	docker "github.com/fsouza/go-dockerclient"
	specs "github.com/opencontainers/runtime-spec/specs-go"
	"github.com/stretchr/testify/assert"
)

const (
	emptyVolumeName1                  = "empty-volume-1"
	emptyVolumeContainerPath1         = "/my/empty-volume-1"
	expectedEmptyVolumeGeneratedPath1 = "/ecs-empty-volume/" + emptyVolumeName1

	emptyVolumeName2                  = "empty-volume-2"
	emptyVolumeContainerPath2         = "/my/empty-volume-2"
	expectedEmptyVolumeGeneratedPath2 = "/ecs-empty-volume/" + emptyVolumeName2

	expectedEmptyVolumeContainerImage = "amazon/ecs-emptyvolume-base"
	expectedEmptyVolumeContainerTag   = "autogenerated"
	expectedEmptyVoluemContainerCmd   = "not-applicable"
)

// TestGetCgroupSpecWithMissingCgroupSpec attempts to retrieve a non-existent cgroup spec
func TestGetCgroupSpecWithMissingCgroupSpec(t *testing.T) {
	task := Task{}

	_, err := task.GetCgroupSpec()
	assert.Error(t, err, "missing cgroup spec")
}

// TestGetCgroupSpecWithValidCgroupSpec checks if valid cgroup specs can be retrieved
func TestGetCgroupSpecWithValidCgroupSpec(t *testing.T) {
	task := Task{
		CgroupSpec: &cgroup.Spec{},
	}
	_, err := task.GetCgroupSpec()
	assert.NoError(t, err, "success")
}

// TestUpdateHostConfigWithCgroupParentWithInvalidCgroupSpec checks if hostConfig
// can be updated for task with no cgroup spec
func TestUpdateHostConfigWithCgroupParentWithInvalidCgroupSpec(t *testing.T) {
	task := Task{}
	hostConfig := &docker.HostConfig{}

	err := task.updateHostConfigWithCgroupParent(hostConfig)
	assert.Error(t, err, "invalid cgroup spec")
	assert.Empty(t, hostConfig.CgroupParent)
}

// TestUpdateHostConfigWithEmptyCgroupRoot checks for empty cgroup root
func TestUpdateHostConfigWithEmptyCgroupRoot(t *testing.T) {
	cgroupSpec := cgroup.Spec{
		Root:  "",
		Specs: &specs.LinuxResources{},
	}
	task := Task{
		CgroupSpec: &cgroupSpec,
	}
	hostConfig := &docker.HostConfig{}

	err := task.updateHostConfigWithCgroupParent(hostConfig)
	assert.Error(t, err, "empty group root")
}

// TestUpdateHostConfigWithCgroupParentHappyPath checks if hostConfig can be updated
// from a task with cgroup spec
func TestUpdateHostConfigWithCgroupParentHappyPath(t *testing.T) {
	cgroupSpec := cgroup.Spec{
		Root:  "/ecs/task-id",
		Specs: &specs.LinuxResources{},
	}
	task := Task{
		CgroupSpec: &cgroupSpec,
	}
	hostConfig := &docker.HostConfig{}

	err := task.updateHostConfigWithCgroupParent(hostConfig)
	assert.NoError(t, err, "valid cgroup spec")
	assert.NotEmpty(t, hostConfig.CgroupParent)
	assert.Equal(t, "/ecs/task-id", hostConfig.CgroupParent)
}
